/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE>; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td1: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 66 67 68 65 64 52 53 54 70 71 69>;
            hold-trigger-on-release;
            require-prior-idle-ms = <75>;
            retro-tap;
        };

        lsk: lsk {
            compatible = "zmk,behavior-sticky-key";
            label = "LSK";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <2000>;
            ignore-modifiers;
            quick-release;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 55 56 57 72 73 74>;
            require-prior-idle-ms = <75>;
            retro-tap;
        };

        hrm_r_fast: hrm_r_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R_FAST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 66 67 68 65 64 52 69 70 52 53 54 70 71>;
            hold-trigger-on-release;
            require-prior-idle-ms = <65>;
            retro-tap;
        };

        hrm_l_fast: hrm_l_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L_FAST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <65>;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 56 57 74 73 72 55>;
            retro-tap;
        };

        shift_dance: shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <65>;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 56 57 74 73 72 55>;
        };

        td3: td3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        llt: llt {
            compatible = "zmk,behavior-hold-tap";
            label = "LLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <500>;
            quick-tap-ms = <500>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        dash {
            bindings = <&kp MINUS>;
            key-positions = <25 26 24>;
            require-prior-idle-ms = <65>;
            layers = <0>;
            timeout-ms = <65>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <37 38 36>;
            require-prior-idle-ms = <65>;
            layers = <0>;
            timeout-ms = <65>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <67 66 68>;
            require-prior-idle-ms = <65>;
            layers = <0>;
            timeout-ms = <65>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <48 49 50>;
            require-prior-idle-ms = <65>;
            layers = <0>;
            timeout-ms = <65>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1            &kp F2         &kp F3          &kp F4            &kp F5                                                                                                                      &kp F6                 &kp F7                &kp F8           &kp F9            &kp F10
&kp GRAVE         &kp N1         &kp N2          &kp N3            &kp N4                &kp N5                                                                                        &kp N6  &kp N7                 &kp N8                &kp N9           &kp N0            &kp MINUS
&kp TAB           &kp Q          &kp W           &kp E             &kp R                 &kp T                                                                                         &kp Y   &kp U                  &kp I                 &kp O            &kp P             &kp PIPE
&mt LCTRL ESCAPE  &kp A          &kp S           &hrm_l LSHFT D    &hrm_l LCTRL F        &kp G                                                                                         &kp H   &hrm_r RCTRL J         &hrm_r RIGHT_SHIFT K  &kp L            &kp SEMI          &kp SQT
&shift_dance      &kp Z          &kp X           &kp C             &kp V                 &kp B   &kp LCTRL         &mo 3        &layer_td1   &kp LGUI    &kp BACKSLASH  &kp EQUAL      &kp N   &kp M                  &kp COMMA             &kp DOT          &kp FSLH          &shift_dance
&magic 2 0        &kp LESS_THAN  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS          &llt 3 BACKSPACE  &lt 1 SPACE  &lt 3 ENTER  &kp DELETE  &lt 3 ENTER    &kp BACKSPACE          &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET     &kp RIGHT_BRACE  &kp GREATER_THAN  &kp RCTRL
            >;
        };

        nav {
            bindings = <
&trans  &trans              &kp C_MUTE     &kp C_VOL_DN     &kp C_VOLUME_UP                                                                                  &kp C_MUTE             &kp C_VOL_DN  &kp C_VOL_UP  &none            &none
&none   &none               &none          &none            &kp PIPE         &kp UNDER                                                            &kp LPAR   &kp RIGHT_PARENTHESIS  &none         &none         &none            &none
&trans  &kp PAGE_UP         &kp HOME       &kp UP           &kp END          &kp PAGE_DOWN                                                        &kp MINUS  &kp N7                 &kp N8        &kp N9        &kp KP_MULTIPLY  &none
&trans  &kp LC(LEFT_ARROW)  &kp LEFT       &kp DOWN         &kp RIGHT        &kp LC(RIGHT_ARROW)                                                  &kp EQUAL  &kp N4                 &kp N5        &kp N6        &kp FSLH         &none
&trans  &sk LEFT_GUI        &lsk LEFT_ALT  &lsk LEFT_SHIFT  &lsk LCTRL       &caps_word           &trans  &trans  &to 0   &trans  &none   &trans  &kp PLUS   &kp N1                 &kp N2        &kp N3        &kp KP_ENTER     &none
&none   &kp LEFT_GUI        &kp LCTRL      &kp LEFT_ALT     &kp DELETE                            &trans  &trans  &trans  &trans  &trans  &kp N0             &kp N0                 &kp N0        &kp DOT       &kp KP_ENTER     &none
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 4
            >;
        };

        code {
            bindings = <
&none  &none  &none          &none      &none                                                                     &none  &none  &none  &none  &none
&none  &none  &none          &none      &none             &none                                            &none  &none  &none  &none  &none  &none
&none  &none  &kp UNDER      &kp PIPE   &kp MINUS         &none                                            &none  &none  &none  &none  &none  &none
&none  &none  &kp LESS_THAN  &kp EQUAL  &kp GREATER_THAN  &none                                            &none  &none  &none  &none  &none  &none
&none  &none  &kp BACKSLASH  &kp GRAVE  &kp SLASH         &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none          &none      &none                    &none  &none  &none  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        shortcuts {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
