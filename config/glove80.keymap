/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behavior includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_tmux 3
#define LAYER_coding 4

/* To deal with the situation where there is no Lower layer, to keep &lower happy */

#ifndef LAYER_Lower

#define LAYER_Lower 0

#

endif {
    /* Custom Device-tree */
    /* Glove80 system behavior & macros */

    /

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #else

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */

/ {
};

/* Automatically generated macro definitions */

/ {
    macros {
    };
};

/* Automatically generated behavior definitions */

/ {
    behaviors {
        // timeless hrm right shift

        bhrm_r_fast: bhrm_r_fast {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            retro-tap;
            hold-trigger-key-positions = <15 0 1 2 4 3 10 11 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 65 66 67 68 69 70 71 12 13 14 54 64>;
            hold-trigger-on-release;
        };

        // timeless hrm left

        bhrm_right: bhrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            retro-tap;
            hold-trigger-key-positions = <15 0 1 2 4 3 10 11 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 65 66 67 68 69 70 71 12 13 14 54 64>;
            hold-trigger-on-release;
        };

        // timeless hrm left shift

        bhrm_l_fast: bhrm_l_fast {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            retro-tap;
            hold-trigger-key-positions = <5 6 7 8 17 18 19 20 28 29 30 31 32 40 41 42 43 44 55 56 57 58 59 60 61 62 73 74 75 76 77 78 9 21 33 45 63 79 16 72>;
            hold-trigger-on-release;
        };

        // timeless hrm left

        bhrm_l: bhrm_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            retro-tap;
            hold-trigger-key-positions = <15 0 1 2 4 3 10 11 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 65 66 67 68 69 70 71 12 13 14 54 64>;
            hold-trigger-on-release;
        };

        lsk: lsk {
            compatible = "zmk,behavior-sticky-key";
            label = "LSK";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            ignore-modifiers;
        };

        llsk: llsk {
            compatible = "zmk,behavior-sticky-key";
            label = "LLSK";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            lazy;
            ignore-modifiers;
        };
    };
};

/* Automatically generated combos definitions */

/ {
    combos {
        compatible = "zmk,combos";

        // equals

        combo_equals {
            key-positions = <67 68>;
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_openbrace {
            key-positions = <49 50>;
            bindings = <&kp LBRC>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_openbracket {
            key-positions = <37 38>;
            bindings = <&kp LBKT>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_openparen {
            key-positions = <26 25>;
            bindings = <&kp LPAR>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rightarrow {
            key-positions = <75 76>;
            bindings = <&kp GT>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rightbrace {
            key-positions = <59 60>;
            bindings = <&kp RBRC>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rightbracket {
            key-positions = <41 42>;
            bindings = <&kp RBKT>;
            require-prior-idle-ms = <100>;
            slow-release;
        };

        combo_rightparen {
            key-positions = <29 30>;
            bindings = <&kp RPAR>;
            require-prior-idle-ms = <100>;
            slow-release;
        };
    };
};

/* Automatically generated keymap */

/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp F1                &kp F2          &kp F3          &kp F4                &kp F5                                                                                             &kp F6               &kp F7                &kp F8              &kp F9                 &kp F10
&kp GRAVE             &kp N1          &kp N2          &kp N3                &kp N4           &kp N5                                                                    &kp N6  &kp N7               &kp N8                &kp N9              &kp N0                 &kp MINUS
&kp TAB               &kp Q           &kp W           &kp E                 &kp R            &kp T                                                                     &kp Y   &kp U                &kp I                 &kp O               &kp P                  &kp BSPC
&kp ESC               &bhrm_l LGUI A  &bhrm_l LALT S  &bhrm_l_fast LSHFT D  &bhrm_l LCTRL F  &kp G                                                                     &kp H   &bhrm_right RCTRL J  &bhrm_r_fast RSHFT K  &bhrm_right RALT L  &bhrm_right RGUI SEMI  &kp SQT
&kp LSHFT             &kp Z           &kp X           &kp C                 &kp V            &kp B   &kp LCTRL  &kp LSHFT    &kp LALT  &kp LGUI  &kp BSLH   &kp EQUAL  &kp N   &kp M                &kp COMMA             &kp DOT             &kp FSLH               &kp RSHFT
&magic LAYER_Magic 0  &kp HOME        &kp END         &kp LEFT              &kp RIGHT                &kp BSPC   &lt 1 SPACE  &kp RET   &kp DEL   &lt 1 RET  &kp BSPC           &kp UP               &kp DOWN              &kp LBKT            &kp RBKT               &kp RCTRL
            >;
        };

        layer_Lower {
            bindings = <
&kp C_MUTE            &kp C_VOL_DN  &kp C_VOL_UP    &none           &none                                                                                        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &none            &none
&none                 &none         &none           &none           &none            &none                                                          &none        &none       &none         &none         &none            &kp BSPC
&none                 &kp PG_UP     &kp HOME        &kp UP_ARROW    &kp END          &kp PG_DN                                                      &kp MINUS    &kp N7      &kp N8        &kp N9        &kp KP_MULTIPLY  &kp BSPC
&none                 &kp LC(LEFT)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(RIGHT)                                                  &kp EQUAL    &kp N4      &kp N5        &kp N6        &kp KP_SLASH     &kp BSPC
&kp LSHFT             &sk LGUI      &sk LALT        &sk LSHFT       &sk LCTRL        &trans         &trans  &trans  &trans  &trans  &trans  &trans  &kp KP_PLUS  &kp N1      &kp N2        &kp N3        &kp KP_ENTER     &none
&magic LAYER_Magic 0  &kp CAPS      &none           &none           &none                           &trans  &trans  &trans  &trans  &trans  &kp N0               &none       &none         &kp DOT       &kp KP_ENTER     &none
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        layer_tmux {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_coding {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
